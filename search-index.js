var searchIndex = {};
searchIndex["rusty_secrets"] = {"doc":"`RustySecrets` implements Shamir's secret sharing in Rust. It provides the possibility to sign shares.","items":[[0,"errors","rusty_secrets","Define the various error kinds specific to deterministic secret sharing.",null,null],[3,"Error","rusty_secrets::errors","The Error type.",null,null],[12,"0","","The kind of the error.",0,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",1,null],[13,"Io","","",1,null],[13,"IntegerParsingError","","",1,null],[13,"ThresholdTooBig","","",1,null],[13,"ThresholdTooSmall","","",1,null],[13,"SecretTooBig","","",1,null],[13,"InvalidShareCountMax","","",1,null],[13,"InvalidShareCountMin","","",1,null],[13,"EmptySecret","","",1,null],[13,"EmptyShares","","",1,null],[13,"IncompatibleSets","","",1,null],[13,"MissingShares","","",1,null],[13,"InvalidSignature","","",1,null],[13,"MissingSignature","","",1,null],[13,"SecretDeserializationError","","",1,null],[13,"ShareParsingError","","",1,null],[13,"ShareParsingErrorEmptyShare","","",1,null],[13,"ShareParsingInvalidShareId","","",1,null],[13,"ShareParsingInvalidShareThreshold","","",1,null],[13,"InvalidSS1Parameters","","",1,null],[13,"InvalidSplitParametersZero","","",1,null],[13,"CannotGenerateRandomNumbers","","",1,null],[13,"DuplicateShareId","","",1,null],[13,"InconsistentSecretLengths","","",1,null],[13,"InconsistentShares","","",1,null],[13,"InconsistentThresholds","","",1,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",0,{"i":[{"n":"errorkind"},{"n":"state"}],"o":{"n":"error"}}],[11,"from_kind","","",0,null],[11,"with_chain","","",0,{"i":[{"n":"e"},{"n":"k"}],"o":{"n":"self"}}],[11,"kind","","",0,null],[11,"iter","","",0,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"chain_err","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"backtrace","","",0,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"extract_backtrace","","",0,{"i":[{"n":"error"}],"o":{"g":["internalbacktrace"],"n":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,{"i":[{"n":"errorkind"}],"o":{"n":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,{"i":[{"n":"e"},{"n":"k"}],"o":{"n":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",0,{"i":[{"g":["error"],"n":"box"},{"n":"k"}],"o":{"n":"error"}}],[11,"kind","","Returns the kind of the error.",0,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"iter","","Iterates over the error chain.",0,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",0,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"error"}}],[11,"description","","A short description of the error. This method is identical to `Error::description()`",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"parseinterror"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"errorkind"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","A string describing the error kind.",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",1,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"error"}],"o":{"n":"self"}}],[0,"proto","rusty_secrets","Protocol buffer definitions.",null,null],[4,"VersionProto","rusty_secrets::proto","",null,null],[13,"INITIAL_RELEASE","","",3,null],[0,"wrapped","","",null,null],[3,"SecretProto","rusty_secrets::proto::wrapped","",null,null],[12,"version","","",4,null],[12,"secret","","",4,null],[12,"mime_type","","",4,null],[3,"ShareProto","","",null,null],[12,"shamir_data","","",5,null],[12,"signature","","",5,null],[12,"proof","","",5,null],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"secretproto"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"secretproto"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"secretproto"}}],[11,"default","","",4,{"o":{"n":"secretproto"}}],[11,"new","","",4,{"o":{"n":"secretproto"}}],[11,"default_instance","","",4,{"o":{"n":"secretproto"}}],[11,"clear_version","","",4,{"i":[{"n":"self"}]}],[11,"set_version","","",4,{"i":[{"n":"self"},{"n":"versionproto"}]}],[11,"get_version","","",4,{"i":[{"n":"self"}],"o":{"n":"versionproto"}}],[11,"clear_secret","","",4,{"i":[{"n":"self"}]}],[11,"set_secret","","",4,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}]}],[11,"mut_secret","","",4,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"take_secret","","",4,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"get_secret","","",4,null],[11,"clear_mime_type","","",4,{"i":[{"n":"self"}]}],[11,"set_mime_type","","",4,{"i":[{"n":"self"},{"n":"string"}]}],[11,"mut_mime_type","","",4,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"take_mime_type","","",4,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"get_mime_type","","",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"is_initialized","","",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"merge_from","","",4,{"i":[{"n":"self"},{"n":"codedinputstream"}],"o":{"n":"protobufresult"}}],[11,"compute_size","","",4,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"write_to_with_cached_sizes","","",4,{"i":[{"n":"self"},{"n":"codedoutputstream"}],"o":{"n":"protobufresult"}}],[11,"get_cached_size","","",4,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_unknown_fields","","",4,{"i":[{"n":"self"}],"o":{"n":"unknownfields"}}],[11,"mut_unknown_fields","","",4,{"i":[{"n":"self"}],"o":{"n":"unknownfields"}}],[11,"as_any","","",4,{"i":[{"n":"self"}],"o":{"n":"any"}}],[11,"as_any_mut","","",4,{"i":[{"n":"self"}],"o":{"n":"any"}}],[11,"into_any","","",4,{"i":[{"n":"box"}],"o":{"g":["any"],"n":"box"}}],[11,"descriptor","","",4,{"i":[{"n":"self"}],"o":{"n":"messagedescriptor"}}],[11,"new","","",4,{"o":{"n":"secretproto"}}],[11,"descriptor_static","","",4,{"i":[{"g":["secretproto"],"n":"option"}],"o":{"n":"messagedescriptor"}}],[11,"clear","","",4,{"i":[{"n":"self"}]}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_ref","","",4,{"i":[{"n":"self"}],"o":{"n":"protobufvalueref"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"shareproto"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"shareproto"}],"o":{"n":"bool"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"shareproto"}}],[11,"default","","",5,{"o":{"n":"shareproto"}}],[11,"new","","",5,{"o":{"n":"shareproto"}}],[11,"default_instance","","",5,{"o":{"n":"shareproto"}}],[11,"clear_shamir_data","","",5,{"i":[{"n":"self"}]}],[11,"set_shamir_data","","",5,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}]}],[11,"mut_shamir_data","","",5,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"take_shamir_data","","",5,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"get_shamir_data","","",5,null],[11,"clear_signature","","",5,{"i":[{"n":"self"}]}],[11,"set_signature","","",5,{"i":[{"n":"self"},{"g":["vec"],"n":"repeatedfield"}]}],[11,"mut_signature","","",5,{"i":[{"n":"self"}],"o":{"n":"repeatedfield"}}],[11,"take_signature","","",5,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"repeatedfield"}}],[11,"get_signature","","",5,null],[11,"clear_proof","","",5,{"i":[{"n":"self"}]}],[11,"set_proof","","",5,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}]}],[11,"mut_proof","","",5,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"take_proof","","",5,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"get_proof","","",5,null],[11,"is_initialized","","",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"merge_from","","",5,{"i":[{"n":"self"},{"n":"codedinputstream"}],"o":{"n":"protobufresult"}}],[11,"compute_size","","",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"write_to_with_cached_sizes","","",5,{"i":[{"n":"self"},{"n":"codedoutputstream"}],"o":{"n":"protobufresult"}}],[11,"get_cached_size","","",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_unknown_fields","","",5,{"i":[{"n":"self"}],"o":{"n":"unknownfields"}}],[11,"mut_unknown_fields","","",5,{"i":[{"n":"self"}],"o":{"n":"unknownfields"}}],[11,"as_any","","",5,{"i":[{"n":"self"}],"o":{"n":"any"}}],[11,"as_any_mut","","",5,{"i":[{"n":"self"}],"o":{"n":"any"}}],[11,"into_any","","",5,{"i":[{"n":"box"}],"o":{"g":["any"],"n":"box"}}],[11,"descriptor","","",5,{"i":[{"n":"self"}],"o":{"n":"messagedescriptor"}}],[11,"new","","",5,{"o":{"n":"shareproto"}}],[11,"descriptor_static","","",5,{"i":[{"g":["shareproto"],"n":"option"}],"o":{"n":"messagedescriptor"}}],[11,"clear","","",5,{"i":[{"n":"self"}]}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_ref","","",5,{"i":[{"n":"self"}],"o":{"n":"protobufvalueref"}}],[11,"clone","rusty_secrets::proto","",3,{"i":[{"n":"self"}],"o":{"n":"versionproto"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"versionproto"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",3,null],[11,"value","","",3,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"from_i32","","",3,{"i":[{"n":"i32"}],"o":{"g":["versionproto"],"n":"option"}}],[11,"values","","",3,null],[11,"enum_descriptor_static","","",3,{"i":[{"g":["versionproto"],"n":"option"}],"o":{"n":"enumdescriptor"}}],[11,"default","","",3,{"o":{"n":"self"}}],[11,"as_ref","","",3,{"i":[{"n":"self"}],"o":{"n":"protobufvalueref"}}],[0,"sss","rusty_secrets","SSS provides Shamir's secret sharing with raw data.",null,null],[5,"split_secret","rusty_secrets::sss","Performs threshold k-out-of-n Shamir's secret sharing.",null,null],[5,"split_secret_rng","","Performs threshold k-out-of-n Shamir's secret sharing with a custom RNG.",null,null],[5,"recover_secret","","Recovers the secret from a k-out-of-n Shamir's secret sharing scheme.",null,null],[0,"wrapped_secrets","rusty_secrets","(Beta) `wrapped_secrets` provides Shamir's secret sharing with a wrapped secret. It currently offers versioning and MIME information about the data.",null,null],[5,"split_secret","rusty_secrets::wrapped_secrets","Performs threshold k-out-of-n Shamir's secret sharing.",null,null],[5,"split_secret_rng","","Performs threshold k-out-of-n Shamir's secret sharing with a custom RNG.",null,null],[5,"recover_secret","","Recovers the secret from a k-out-of-n Shamir's secret sharing.",null,null]],"paths":[[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[4,"VersionProto"],[3,"SecretProto"],[3,"ShareProto"]]};
initSearch(searchIndex);
